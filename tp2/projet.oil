/**
 * @file projet.oil
 *
 * @section desc File description
 *
 * @section copyright Copyright
 *
 * @section infos File informations
 *
 */
OIL_VERSION = "2.5" : "test" ;

IMPLEMENTATION trampoline {
    TASK {
        UINT32 STACKSIZE = 500 ;
        UINT32 PRIORITY = 1 ;
    } ;
    ISR {
        UINT32 STACKSIZE = 500 ;
    } ;
};

CPU test {

    OS config {
        STATUS = EXTENDED;
        ERRORHOOK = FALSE;
        PRETASKHOOK = FALSE;
        APP_SRC = "projet.c"; 
        APP_NAME = "projet_exe";
        TRAMPOLINE_BASE_PATH = "/share/m1info/ITR/osek_env/trampoline/";
        CFLAGS = "-g -c -ffreestanding -fsigned-char -mcpu=arm7tdmi -Os -Winline -Wall -Werror-implicit-function-declaration --param max-inline-insns-single=1000 -ffunction-sections -fdata-sections -std=gnu99";
        ASFLAGS = "-g -mcpu=arm7tdmi --fatal-warnings ";
        LDFLAGS = "-g --cref --allow-multiple-definition --gc-sections";
        LDFLAGS = "-L/share/m1info/ITR/osek_env/arm-elf//lib/gcc/arm-elf/4.5.1/ -lgcc -L/share/m1info/ITR/osek_env/arm-elf//arm-elf/lib -lc";
        SYSTEM_CALL = TRUE;
        
        COMPILER = "arm-elf-gcc";
        ASSEMBLER = "arm-elf-as";
        LINKER = "arm-elf-ld";
        MEMMAP = TRUE{
          COMPILER = gcc;
          LINKER = gnu_ld { SCRIPT = "script.ld"; };
          ASSEMBLER = gnu_as;
          MEMORY_PROTECTION = FALSE;
        };
    } ;

    APPMODE std {
    };
    
    COUNTER SystemCounter {
      SOURCE = it_timer1;
      MAXALLOWEDVALUE = 2000;
      TICKSPERBASE = 1;
      MINCYCLE = 1; 
    };
	
   ISR isr_button_start {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = button_start;
   };

   ISR isr_button_stop {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = button_stop;
   };

   ISR isr_button_left {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = button_left;
   };

   ISR isr_button_right {
       CATEGORY = 2;
		PRIORITY = 1;
		SOURCE = button_right;
   }; 

   	ALARM bumper_alarm {

        COUNTER = SystemCounter;
        ACTION = ACTIVATETASK{
            TASK = checkBumpers;
        };

        AUTOSTART=TRUE{
            ALARMTIME=100;
            CYCLETIME=100;
            APPMODE = std;

        };
    };
	
	Alarm sonar_alarm {
	
		COUNTER = SystemCounter;
		ACTION = ACTIVATETASK{
			TASK = autoSonarCheck;
		};

		AUTOSTART=TRUE{
			ALARMTIME=100;
			CYCLETIME=500;
			APPMODE = std;

		};
    };


    TASK init {
        PRIORITY = 100;
        AUTOSTART = TRUE { APPMODE = std; };
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };
	
	TASK goForward {
        PRIORITY = 1;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };   

	//Higher priority than goForward task, so it can interrupt it
    TASK checkBumpers {
        PRIORITY = 2;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };   
	/*
	* Higher priorities than chechBumpers task, might not be really usefull
	* as long as it's higher than goForward
	*/
	
	TASK turn_right {
        PRIORITY = 3;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };  
	
	TASK turn_left {
        PRIORITY = 3;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };  
	
	TASK culDeSac {
        PRIORITY = 100;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };  
	
	//Same priority as checkBumpers
	TASK autoSonarCheck {
		PRIORITY = 2;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
	};
	
	/*
	* Higher priorities than chechBumpers task, might not be really usefull
	* as long as it's higher than goForward
	*/
	TASK turn_back {
        PRIORITY = 5;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };  
	
	TASK sonarcheck {
        PRIORITY = 4;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
    };  






    
    

};

/* End of file nxt_simple.oil */



